package main.java.algos;

public class MergeSort {

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º)
    private static void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);
            merge(arr, left, mid, right);
        }
    }

    // –°–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–æ–≤–∏–Ω
    private static void merge(int[] arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;

        int[] L = new int[n1];
        int[] R = new int[n2];

        System.arraycopy(arr, left, L, 0, n1);
        System.arraycopy(arr, mid + 1, R, 0, n2);

        int i = 0, j = 0, k = left;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) arr[k++] = L[i++];
            else arr[k++] = R[j++];
        }
        while (i < n1) arr[k++] = L[i++];
        while (j < n2) arr[k++] = R[j++];
    }

    // üîπ –£–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤ —Ç–µ—Å—Ç–∞—Ö
    public static void sort(int[] arr) {
        mergeSort(arr, 0, arr.length - 1);
    }

    // üîπ –ü—Ä–∏–º–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    public static void main(String[] args) {
        int[] arr = {5, 2, 9, 1, 7};
        System.out.println("–î–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:");
        for (int x : arr) System.out.print(x + " ");
        System.out.println();

        sort(arr);

        System.out.println("–ü–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:");
        for (int x : arr) System.out.print(x + " ");
    }
}
