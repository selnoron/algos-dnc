package main.java.algos;

import java.util.Random;

public class QuickSort {

    private static int maxDepth;       // –º–∞–∫—Å–∏–º—É–º –≥–ª—É–±–∏–Ω—ã —Ä–µ–∫—É—Ä—Å–∏–∏
    private static int currentDepth;   // —Ç–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏

    // üîπ –£–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    public static void sort(int[] arr) {
        maxDepth = 0;
        currentDepth = 0;
        quickSort(arr, 0, arr.length - 1);
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º QuickSort
    private static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            currentDepth++;
            maxDepth = Math.max(maxDepth, currentDepth);

            int pivotIndex = partition(arr, low, high);

            // —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞ –º–µ–Ω—å—à–µ–π —á–∞—Å—Ç–∏
            if (pivotIndex - low < high - pivotIndex) {
                quickSort(arr, low, pivotIndex - 1);
                quickSort(arr, pivotIndex + 1, high);
            } else {
                quickSort(arr, pivotIndex + 1, high);
                quickSort(arr, low, pivotIndex - 1);
            }

            currentDepth--;
        }
    }

    // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –≤–æ–∫—Ä—É–≥ pivot
    private static int partition(int[] arr, int low, int high) {
        Random rand = new Random();
        int pivotIndex = rand.nextInt(high - low + 1) + low;
        int pivot = arr[pivotIndex];
        swap(arr, pivotIndex, high);

        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (arr[j] <= pivot) {
                i++;
                swap(arr, i, j);
            }
        }
        swap(arr, i + 1, high);
        return i + 1;
    }

    // –û–±–º–µ–Ω —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    private static void swap(int[] arr, int i, int j) {
        int tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    // üîπ –í–µ—Ä–Ω—É—Ç—å –≥–ª—É–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å–∏–∏
    public static int getMaxDepth() {
        return maxDepth;
    }

    // üîπ –ü—Ä–∏–º–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    public static void main(String[] args) {
        int[] arr = {10, 7, 8, 9, 1, 5};
        System.out.println("–î–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:");
        for (int x : arr) System.out.print(x + " ");
        System.out.println();

        sort(arr);

        System.out.println("–ü–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:");
        for (int x : arr) System.out.print(x + " ");
        System.out.println("\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏: " + getMaxDepth());
    }
}
